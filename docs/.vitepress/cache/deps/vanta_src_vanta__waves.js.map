{
  "version": 3,
  "sources": ["../../../../node_modules/vanta/src/vanta.waves.js"],
  "sourcesContent": ["import VantaBase, { VANTA } from './_base.js'\r\nimport {rn,ri,sample} from './helpers.js'\r\n\r\nlet THREE = (typeof window == 'object' && window.THREE)\r\n\r\nconst defaultOptions = {\r\n  color: 0x005588,\r\n  shininess: 30,\r\n  waveHeight: 15,\r\n  waveSpeed: 1,\r\n  zoom: 1\r\n}\r\n\r\nclass Waves extends VantaBase {\r\n  static initClass() {\r\n    this.prototype.ww = 100;\r\n    this.prototype.hh = 80;\r\n    this.prototype.waveNoise = 4; // Choppiness of water\r\n  }\r\n  constructor(userOptions) {\r\n    THREE = userOptions.THREE || THREE\r\n    super(userOptions)\r\n  }\r\n\r\n  getMaterial() {\r\n    const options = {\r\n      color: this.options.color,\r\n      shininess: this.options.shininess,\r\n      flatShading: true,\r\n      side: THREE.DoubleSide\r\n    };\r\n    return new THREE.MeshPhongMaterial(options);\r\n  }\r\n\r\n  onInit() {\r\n    let i, j;\r\n    const CELLSIZE = 18;\r\n    const material = this.getMaterial();\r\n    const geometry = new THREE.BufferGeometry();\r\n\r\n    // Add vertices\r\n    this.gg = [];\r\n    const points = [];\r\n    for (i=0; i<=this.ww; i++){\r\n      this.gg[i] = [];\r\n      for (j=0; j<=this.hh; j++){\r\n        const id = points.length;\r\n        const newVertex = new THREE.Vector3(\r\n          (i - (this.ww * 0.5)) * CELLSIZE,\r\n          rn(0, this.waveNoise) - 10,\r\n          ((this.hh * 0.5) - j) * CELLSIZE\r\n        );\r\n        points.push(newVertex);\r\n        this.gg[i][j] = id;\r\n      }\r\n    }\r\n    geometry.setFromPoints(points);\r\n\r\n    // Add faces\r\n    // a b\r\n    // c d <-- Looking from the bottom right point\r\n    const indices = [];\r\n    for (i=1; i<=this.ww; i++){\r\n      for (j=1; j<=this.hh; j++){\r\n        let face1, face2\r\n        const d = this.gg[i][j]\r\n        const b = this.gg[i][j-1]\r\n        const c = this.gg[i-1][j]\r\n        const a = this.gg[i-1][j-1]\r\n        if (ri(0,1)) {\r\n          face1 = [a, b, c]\r\n          face2 = [b, c, d]\r\n        } else {\r\n          face1 = [a, b, d]\r\n          face2 = [a, c, d]\r\n        }\r\n        indices.push(...face1, ...face2)\r\n      }\r\n    }\r\n    geometry.setIndex(indices);\r\n\r\n    this.plane = new THREE.Mesh(geometry, material);\r\n    this.scene.add(this.plane);\r\n\r\n    // WIREFRAME\r\n    // lightColor = 0x55aaee\r\n    // darkColor = 0x225577\r\n    // thresholdAngle = 2\r\n    // geo = new THREE.EdgesGeometry(geometry, thresholdAngle)\r\n    // mat = new THREE.LineBasicMaterial( { color: lightColor, linewidth: 2 } )\r\n    // @wireframe = new THREE.LineSegments( geo, mat )\r\n    // @scene.add( @wireframe )\r\n\r\n    // LIGHTS\r\n    const ambience = new THREE.AmbientLight( 0xffffff, 0.9 );\r\n    this.scene.add(ambience);\r\n\r\n    const pointLight = new THREE.PointLight( 0xffffff, 0.9 );\r\n    pointLight.position.set(-100,250,-100);\r\n    this.scene.add(pointLight);\r\n\r\n    // CAMERA\r\n    this.camera = new THREE.PerspectiveCamera(\r\n      35,\r\n      this.width / this.height,\r\n      50, 10000);\r\n\r\n    const xOffset = -10;\r\n    const zOffset = -10;\r\n    this.cameraPosition = new THREE.Vector3( 250+xOffset, 200, 400+zOffset );\r\n    this.cameraTarget = new THREE.Vector3( 150+xOffset, -30, 200+zOffset );\r\n    this.camera.position.copy(this.cameraPosition);\r\n    this.scene.add(this.camera);\r\n  }\r\n\r\n  onUpdate() {\r\n    // Update options\r\n    let diff;\r\n    this.plane.material.color.set(this.options.color)\r\n    this.plane.material.shininess = this.options.shininess\r\n    this.camera.ox = this.cameraPosition.x / this.options.zoom\r\n    this.camera.oy = this.cameraPosition.y / this.options.zoom\r\n    this.camera.oz = this.cameraPosition.z / this.options.zoom\r\n\r\n    if (this.controls != null) {\r\n      this.controls.update()\r\n    }\r\n\r\n    const c = this.camera\r\n    if (Math.abs(c.tx - c.position.x) > 0.01) {\r\n      diff = c.tx - c.position.x\r\n      c.position.x += diff * 0.02\r\n    }\r\n    if (Math.abs(c.ty - c.position.y) > 0.01) {\r\n      diff = c.ty - c.position.y\r\n      c.position.y += diff * 0.02\r\n    }\r\n    if (Math.abs(c.tz - c.position.z) > 0.01) {\r\n      diff = c.tz - c.position.z\r\n      c.position.z += diff * 0.02\r\n    }\r\n\r\n    c.lookAt( this.cameraTarget )\r\n\r\n    // Fix flickering problems\r\n    // c.near = Math.max((c.position.y * 0.5) - 20, 1);\r\n    // c.updateMatrix();\r\n\r\n    // WAVES\r\n    this.oy = this.oy || {}\r\n    for (let i = 0; i < this.plane.geometry.attributes.position.array.length; i += 3) {\r\n      const v = {\r\n        x: this.plane.geometry.attributes.position.array[i],\r\n        y: this.plane.geometry.attributes.position.array[i + 1],\r\n        z: this.plane.geometry.attributes.position.array[i + 2],\r\n        oy: this.oy[i]\r\n      };\r\n      if (!v.oy) { // INIT\r\n        this.oy[i] = v.y\r\n      } else {\r\n        const s = this.options.waveSpeed\r\n        const crossChop = Math.sqrt(s) * Math.cos(-v.x - (v.z*0.7)) // + s * (i % 229) / 229 * 5\r\n        const delta = Math.sin((((s*this.t*0.02) - (s*v.x*0.025)) + (s*v.z*0.015) + crossChop))\r\n        const trochoidDelta = Math.pow(delta + 1, 2) / 4\r\n        v.y = v.oy + (trochoidDelta * this.options.waveHeight)\r\n        this.plane.geometry.attributes.position.array[i + 1] = v.y\r\n      }\r\n    }\r\n\r\n      // @wireframe.geometry.vertices[i].y = v.y\r\n\r\n    this.plane.geometry.attributes.position.setUsage(THREE.DynamicDrawUsage)\r\n    this.plane.geometry.computeVertexNormals()\r\n    this.plane.geometry.attributes.position.needsUpdate = true\r\n\r\n    // @scene.remove( @wireframe )\r\n    // geo = new THREE.EdgesGeometry(@plane.geometry)\r\n    // mat = new THREE.LineBasicMaterial( { color: 0x55aaee, linewidth: 2} )\r\n    // @wireframe = new THREE.LineSegments( geo, mat )\r\n    // @scene.add( @wireframe )\r\n\r\n    if (this.wireframe) {\r\n      this.wireframe.geometry.fromGeometry(this.plane.geometry)\r\n      this.wireframe.geometry.computeFaceNormals()\r\n    }\r\n  }\r\n\r\n  onMouseMove(x,y) {\r\n    const c = this.camera;\r\n    if (!c.oy) {\r\n      c.oy = c.position.y;\r\n      c.ox = c.position.x;\r\n      c.oz = c.position.z;\r\n    }\r\n    c.tx = c.ox + (((x-0.5) * 100) / this.options.zoom);\r\n    c.ty = c.oy + (((y-0.5) * -100) / this.options.zoom);\r\n    return c.tz = c.oz + (((x-0.5) * -50) / this.options.zoom);\r\n  }\r\n}\r\n\r\nWaves.prototype.defaultOptions = defaultOptions\r\nWaves.initClass()\r\nexport default VANTA.register('WAVES', Waves)"],
  "mappings": "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",
  "names": []
}
